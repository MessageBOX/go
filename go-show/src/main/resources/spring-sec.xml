<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.2.xsd
          ">
	<!--页面不过滤 -->
	<security:http pattern="/static/**" security="none" />
	<security:http pattern="/res/**" security="none" />
	<security:http pattern="/login" security="none" />
	<security:http pattern="/404.jsp" security="none" />
	<security:http pattern="/accessDenied.jsp" security="none" />
	<security:http pattern="/error" security="none" />
	<!---->
	<security:http pattern="/makeReport/**" security="none"/>
	<security:http pattern="/browsen**" security="none"/>
	<security:http pattern="/att/**" security="none"/>
	<security:http pattern="/wechat/demo/**" security="none"/>
	<security:http pattern="/validationCodeServlet.png" security="none"/>
	<security:http  auto-config="true" entry-point-ref="smartLoginUrlAuthenticationEntryPoint">
	<!--  表达式模式
	<security:http auto-config="true" use-expressions="true">-->
		<!--  游客
		<security:intercept-url pattern="/admin/home" access="ROLE_ANONYMOUS" />-->
		<security:intercept-url pattern="/cl/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:form-login login-page="/login" default-target-url="/admin/home" />
		<security:logout logout-success-url="/login" />
		<security:http-basic />

		<security:access-denied-handler ref="accessDeniedHandler" />
		<security:remember-me />
		<!-- 自定义自动登录 
		<security:custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER"/>-->


		<security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrentSessionFilter" />
		
		<!-- 最大用户数
		<security:session-management >
            <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
        </security:session-management>  -->

		<!-- 登出 
		<custom-filter ref="logoutFilter" before="LOGOUT_FILTER" />-->

		<!-- ajax登录过滤器
		<security:custom-filter ref="ajaxLoginFilter" before="FORM_LOGIN_FILTER" />-->
		<!-- 登录过滤器-->
		<security:custom-filter ref="loginFilter" before="FORM_LOGIN_FILTER" />
		<!--权限过滤器-->
		<security:custom-filter ref="customFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />

	</security:http>

	<!-- ajax登录过滤器
	<bean id="ajaxLoginFilter"
		  class="com.ansteel.common.springsecurity.service.CustomUsernamePasswordAuthenticationFilter">
		<property name="authenticationSuccessHandler" ref="ajaxAuthenticationSuccessHandler" />
		<property name="authenticationFailureHandler" ref="ajaxAuthenticationFailureHandler" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="filterProcessesUrl" value="/ajaxLogin" />
	</bean>

	<bean id="ajaxAuthenticationSuccessHandler" class="com.ansteel.common.springsecurity.service.AjaxAuthenticationSuccessHandler">
	</bean>

	<bean id="ajaxAuthenticationFailureHandler" class="com.ansteel.common.springsecurity.service.AjaxAuthenticationFailureHandler">
	</bean>-->


	<!-- 登录验证器-->
	<bean id="loginFilter"
		  class="com.ansteel.common.springsecurity.service.CustomUsernamePasswordAuthenticationFilter">
		<property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler" />
		<property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler" />
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>

	<bean id="loginLogAuthenticationSuccessHandler" class="com.ansteel.common.springsecurity.service.AjaxAuthenticationSuccessHandler">
		<property name="alwaysUseDefaultTargetUrl" value="false"/>
		<property name="defaultTargetUrl" value="/"/>
	</bean>
	<bean id="simpleUrlAuthenticationFailureHandler"
				class="com.ansteel.common.springsecurity.service.AjaxAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/login.jsp?login_error=1" />
	</bean>
	<!-- Remember-Me对应的Filter 
   <bean id="rememberMeFilter"
   class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
      <property name="rememberMeServices" ref="rememberMeServices" />
      <property name="authenticationManager" ref="authenticationManager" />
   </bean>
   
   <bean id="rememberMeServices"
   class="com.ansteel.common.springsecurity.service.CustomTokenBasedRememberMeServices">
   	  <property name="key" value="gugu" />
      <property name="userDetailsService" ref="customUserDetailsService" />
   </bean>-->
   
   <!-- 自定义权限不足处理程序 -->  
	<bean id="accessDeniedHandler" class="com.ansteel.common.springsecurity.service.CustomAccessDeniedHandler">  
	    <property name="errorPage" value="/accessDenied.jsp"></property>  
	</bean>  
	
	<bean id="smartLoginUrlAuthenticationEntryPoint"
                class="com.ansteel.common.springsecurity.service.CustomLoginUrlAuthenticationEntryPoint">
       <property name="loginFormUrl" value="/login"/>
    </bean>
	
	<bean  id="customFilterSecurityInterceptor"
		class="com.ansteel.common.springsecurity.service.CustomFilterSecurityInterceptor">		
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="securityMetadataSource" ref="customInvocationSecurityMetadataSource" />
		<property name="accessDecisionManager" ref="customAccessDecisionManager" />
	</bean>
	
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问     -->
	<bean id="customInvocationSecurityMetadataSource" class="com.ansteel.common.springsecurity.service.CustomFilterInvocationSecurityMetadataSource"/>
	
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<bean id="customAccessDecisionManager" class="com.ansteel.common.springsecurity.service.CustomAccessDecisionManager" />
	
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<security:password-encoder ref="passwordEncoder" >
			<!-- <security:password-encoder ref="md5" > -->
				<!-- 添加盐值，增强系统的安全性 
				<salt-source system-wide="system" />-->
			</security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<bean id="passwordEncoder" class="com.ansteel.common.springsecurity.service.SsoPasswordEncoder"/>
	<!-- <bean id="md5" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
	 -->
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<bean id="customUserDetailsService" class="com.ansteel.common.springsecurity.service.EntityUserDetailsService"/>
	
	<!-- session超时 -->
	<bean id="concurrentSessionFilter" class="com.ansteel.common.springsecurity.service.CustomConcurrentSessionFilter">
		<property name="expiredUrl" value="/login?code=4" />
		<property name="sessionRegistry" ref="sessionRegistry" />
	</bean>
	<bean id="sessionRegistry"  
    class="org.springframework.security.core.session.SessionRegistryImpl" />  

</beans>